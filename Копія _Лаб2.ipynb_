{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNgzvPG8pNkzhFe6MXo+1Hx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"wqiqn-AlF-KE","executionInfo":{"status":"ok","timestamp":1703717417724,"user_tz":-120,"elapsed":1079,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n"]},{"cell_type":"markdown","source":["# Preprocess functions"],"metadata":{"id":"e8OX-n4bGMYO"}},{"cell_type":"code","source":["def der(f, x, delta = 1e-6):\n","  return (f(x+delta) - f(x-delta))/(2*delta)\n","\n","def dern(f, x, n, delta = 1e-6):\n","  if n == 1:\n","    return der(f, x, delta)\n","  return (dern(f, x + delta, n-1, delta) - dern(f, x - delta, n-1, delta))/(2*delta)"],"metadata":{"id":"ickwYYC6GK4g","executionInfo":{"status":"ok","timestamp":1703717417725,"user_tz":-120,"elapsed":8,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def my_to_str(num):\n","  if isinstance(num, list) or isinstance(num, np.ndarray):\n","    for j, i in enumerate(num):\n","      num[j] = my_to_str(i)\n","    return num\n","  if isinstance(num, float):\n","    if int(num) == num:\n","      return str(int(num))\n","    num = round(num, 4)\n","    return str(num)\n","  return str(num)\n","\n","def true_print(data):\n","  display(pd.DataFrame(data).applymap(my_to_str))\n","\n","def hypatia_paste(some_data):\n","  for i in some_data:\n","    print('{', end='')\n","    print('}&{'.join(list(map(my_to_str, i))).replace('.',','), end='')\n","    print('}', end='')\n","    print('\\\\\\\\')\n","\n","def display_matrix(matrix):\n","  true_print(matrix)\n","  hypatia_paste(matrix)\n","\n","def display_vector(vector):\n","  # display(pd.DataFrame(vector).T)\n","  print(f\"({' '.join(list(map(my_to_str, vector))).replace('.',',')})\")\n","\n","def display_with_hypatia(data):\n","  if len(data.shape) == 1:\n","    display_vector(data)\n","  elif len(data.shape) == 2:\n","    display_matrix(data)\n","  else:\n","    raise Exception('Not implemented')\n","\n","def show_dictionary_as_dataframe(diction, transp = False):\n","  dataframe = pd.DataFrame(diction).applymap(my_to_str)\n","  if transp:\n","    dataframe = dataframe.T\n","  display(dataframe)\n"],"metadata":{"id":"Wc_8qGDkNEPW","executionInfo":{"status":"ok","timestamp":1703717417725,"user_tz":-120,"elapsed":7,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["def return_func_array(f, bounders, h = 5e-2):\n","  x_array, y_array = [], []\n","  x_start = bounders[0]\n","  while x_start <= bounders[1] - h:\n","    x_array.append(x_start)\n","    y_array.append(f(x_start))\n","    x_start += h\n","  x_array.append(bounders[1])\n","  y_array.append(f(bounders[1]))\n","  return x_array, y_array"],"metadata":{"id":"LHB76J_SJJzR","executionInfo":{"status":"ok","timestamp":1703717417725,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def tridiagonal_matrix_algorithm(coefs, di):\n","  bi = [-i[j] for j,i in enumerate(coefs)]\n","  bi = np.array(bi)\n","\n","  ai = [0]\n","  ai.extend([i[j] for j,i in enumerate(coefs[1:])])\n","  ai = np.array(ai)\n","\n","  ci = [i[j+1] for j,i in enumerate(coefs[:-1])]\n","  ci.extend([0])\n","  ci = np.array(ci)\n","\n","  alpha = [ci[0]/bi[0]]\n","  gama = [-di[0]/bi[0]]\n","\n","  for i,b,c,a,d in zip(range(0,len(bi)-2), bi[1:-1],ci[1:-1],ai[1:-1], di[1:-1]):\n","    alpha.append(c/(b-a*alpha[i]))\n","    gama.append((a*gama[i] - d)/(b-a*alpha[i]))\n","\n","  n = len(di)\n","  xi = [0 for _ in range(n)]\n","  xi[-1] = (ai[-1]*gama[-1]-di[-1])/(bi[-1]-ai[-1]*alpha[-1])\n","\n","  for i in range(n-2, -1, -1):\n","    xi[i] = alpha[i]*xi[i+1]+gama[i]\n","\n","  return xi"],"metadata":{"id":"3b3S_xIMaFkQ","executionInfo":{"status":"ok","timestamp":1703717417725,"user_tz":-120,"elapsed":5,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# Start"],"metadata":{"id":"0hiywCiEGT_V"}},{"cell_type":"markdown","source":["Варіант 19"],"metadata":{"id":"iZb1sbBLGVnZ"}},{"cell_type":"code","source":["f = lambda x: (x-5) ** (1/3)\n","bounders = [10, 3000]\n","n = 11\n","h = 9"],"metadata":{"id":"IT_mtI5lGVNf","executionInfo":{"status":"ok","timestamp":1703717744504,"user_tz":-120,"elapsed":350,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["if len(bounders) == 1:\n","  bounders.append(bounders[0] + h * (n-1))\n","else:\n","  h = np.round((bounders[1] - bounders[0]) / (n-1), 4)\n","\n","hi = [h]*(n)"],"metadata":{"id":"5JZYIK5yIjp8","executionInfo":{"status":"ok","timestamp":1703717744504,"user_tz":-120,"elapsed":2,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["hi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jIYnO7VypzJN","executionInfo":{"status":"ok","timestamp":1703717744812,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"e152f75d-1d38-43a9-86d5-b73f146c20ed"},"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[299.0, 299.0, 299.0, 299.0, 299.0, 299.0, 299.0, 299.0, 299.0, 299.0, 299.0]"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["xy_dict = {'i':[], 'xᵢ':[], 'yᵢ':[]}\n","\n","xy_dict['xᵢ'], xy_dict['yᵢ'] = return_func_array(f, bounders, h)\n","\n","xy_dict['i'] = list(range(len(xy_dict['xᵢ'])))\n","\n","show_dictionary_as_dataframe(xy_dict, transp=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"lCCFbo8SLrIK","executionInfo":{"status":"ok","timestamp":1703717745161,"user_tz":-120,"elapsed":354,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"713452cf-99dc-41df-9882-1bb8ccd422e4"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["      0      1       2      3        4        5        6        7        8   \\\n","i      0      1       2      3        4        5        6        7        8   \n","xᵢ    10    309     608    907     1206     1505     1804     2103     2402   \n","yᵢ  1.71  6.724  8.4484  9.662  10.6295  11.4471  12.1622  12.8017  13.3831   \n","\n","         9        10  \n","i         9       10  \n","xᵢ     2701     3000  \n","yᵢ  13.9179  14.4145  "],"text/html":["\n","  <div id=\"df-23c1b29b-f5dd-4dad-918d-1c57bf4c0f35\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>i</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>7</td>\n","      <td>8</td>\n","      <td>9</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>xᵢ</th>\n","      <td>10</td>\n","      <td>309</td>\n","      <td>608</td>\n","      <td>907</td>\n","      <td>1206</td>\n","      <td>1505</td>\n","      <td>1804</td>\n","      <td>2103</td>\n","      <td>2402</td>\n","      <td>2701</td>\n","      <td>3000</td>\n","    </tr>\n","    <tr>\n","      <th>yᵢ</th>\n","      <td>1.71</td>\n","      <td>6.724</td>\n","      <td>8.4484</td>\n","      <td>9.662</td>\n","      <td>10.6295</td>\n","      <td>11.4471</td>\n","      <td>12.1622</td>\n","      <td>12.8017</td>\n","      <td>13.3831</td>\n","      <td>13.9179</td>\n","      <td>14.4145</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23c1b29b-f5dd-4dad-918d-1c57bf4c0f35')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-23c1b29b-f5dd-4dad-918d-1c57bf4c0f35 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-23c1b29b-f5dd-4dad-918d-1c57bf4c0f35');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-13173764-e6f3-438c-b9f4-562fe1b10604\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13173764-e6f3-438c-b9f4-562fe1b10604')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-13173764-e6f3-438c-b9f4-562fe1b10604 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"code","source":["yi = xy_dict['yᵢ']\n","\n","f_vector = []\n","f_vector.append(3 / hi[0] * ((yi[1] - yi[0]) / hi[0] - der(f, bounders[0])))\n","f_vector.extend([3*((yi[i] - yi[i-1])/hi[i] - (yi[i-1] - yi[i-2])/hi[i-1]) for i in range(2, n)])\n","f_vector.append(- der(f, bounders[1]) - 2 * (yi[-2] - yi[-3]) / hi[-2] + 3 * (yi[-1] - yi[-2]) / hi[-1])\n","\n","ABC_matrix = [np.zeros(n).copy() for _ in range(n)]\n","ABC_matrix[0][0], ABC_matrix[0][1] = [2, 1]\n","for i in range(1, n-1):\n","  ABC_matrix[i][i-1], ABC_matrix[i][i], ABC_matrix[i][i+1] = [hi[i-1], 2 * (hi[i] + hi[i-1]), hi[i]]\n","ABC_matrix[-1][-2], ABC_matrix[-1][-1] = [2 / 3 * hi[-2], hi[-1] + 4 / 3 * hi[-2]]"],"metadata":{"id":"bi7FXHl9qAGQ","executionInfo":{"status":"ok","timestamp":1703717745161,"user_tz":-120,"elapsed":4,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["true_print(ABC_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"4EFwm63CwIJz","executionInfo":{"status":"ok","timestamp":1703717745533,"user_tz":-120,"elapsed":3,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"3ba3eb51-a043-4618-b3da-d2e3a2467b7a"},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":["     0     1     2     3     4     5     6     7     8         9         10\n","0     2     1     0     0     0     0     0     0     0         0         0\n","1   299  1196   299     0     0     0     0     0     0         0         0\n","2     0   299  1196   299     0     0     0     0     0         0         0\n","3     0     0   299  1196   299     0     0     0     0         0         0\n","4     0     0     0   299  1196   299     0     0     0         0         0\n","5     0     0     0     0   299  1196   299     0     0         0         0\n","6     0     0     0     0     0   299  1196   299     0         0         0\n","7     0     0     0     0     0     0   299  1196   299         0         0\n","8     0     0     0     0     0     0     0   299  1196       299         0\n","9     0     0     0     0     0     0     0     0   299      1196       299\n","10    0     0     0     0     0     0     0     0     0  199.3333  697.6667"],"text/html":["\n","  <div id=\"df-50a18335-7401-47b3-9f4f-139e8c85df19\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>299</td>\n","      <td>1196</td>\n","      <td>299</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>199.3333</td>\n","      <td>697.6667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50a18335-7401-47b3-9f4f-139e8c85df19')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-50a18335-7401-47b3-9f4f-139e8c85df19 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-50a18335-7401-47b3-9f4f-139e8c85df19');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-476102fe-c6bf-4241-9afb-e7a06299bb1a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-476102fe-c6bf-4241-9afb-e7a06299bb1a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-476102fe-c6bf-4241-9afb-e7a06299bb1a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"code","source":["ci = tridiagonal_matrix_algorithm(ABC_matrix, f_vector)\n","show_dictionary_as_dataframe(ci, transp=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"K2P3Sc6naJMy","executionInfo":{"status":"ok","timestamp":1703717745805,"user_tz":-120,"elapsed":7,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"a9efa72c-70db-4f55-94eb-e57ac5450e94"},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":["        0       1     2    3     4    5     6     7     8     9     10\n","0  -0.0005  0.0001  -0.0  0.0  -0.0  0.0  -0.0  -0.0  -0.0  -0.0  -0.0"],"text/html":["\n","  <div id=\"df-ee4ae5ec-c20c-427f-a331-2b7066987351\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.0005</td>\n","      <td>0.0001</td>\n","      <td>-0.0</td>\n","      <td>0.0</td>\n","      <td>-0.0</td>\n","      <td>0.0</td>\n","      <td>-0.0</td>\n","      <td>-0.0</td>\n","      <td>-0.0</td>\n","      <td>-0.0</td>\n","      <td>-0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee4ae5ec-c20c-427f-a331-2b7066987351')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ee4ae5ec-c20c-427f-a331-2b7066987351 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ee4ae5ec-c20c-427f-a331-2b7066987351');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"code","source":["ai = yi[:-1]\n","di = [(ci[i+1] - ci[i]) / (3 * hi[i]) for i in range(n-1)]\n","bi = [(yi[i+1] - yi[i]) / hi[i] - hi[i] / 3 * (ci[i+1] + 2 * ci[i]) for i in range(n-1)]\n","# bi.append((yi[-1] - yi[-2]) / hi[-1] + hi[-1] / 3 * (ci[-2] + 2 * ci[-1]))\n","\n","xi = xy_dict['xᵢ']\n","\n","# cube_funcs = [(lambda x: ai[i] + bi[i] * (x - xi[i]) + ci[i] * (x - xi[i]) ** 2 + di[i] * (x - xi[i]) ** 3) for i in range(len(di))]\n","def spline_func(x, i):\n","  return ai[i] + bi[i] * (x - xi[i]) + ci[i] * (x - xi[i]) ** 2 + di[i] * (x - xi[i]) ** 3"],"metadata":{"id":"KdRRwawHb5rU","executionInfo":{"status":"ok","timestamp":1703717746387,"user_tz":-120,"elapsed":3,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["x_array, y_array = return_func_array(f, bounders)\n","\n","plt.plot(x_array, y_array)\n","\n","for i in range(n-1):\n","  x_array, y_array = return_func_array(lambda x: spline_func(x, i), [xi[i], xi[i+1]])\n","\n","  plt.plot(x_array, y_array)\n","\n","plt.plot(xy_dict['xᵢ'], xy_dict['yᵢ'], 'ro')\n","\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"TqAEEkWVI7PL","executionInfo":{"status":"ok","timestamp":1703717747237,"user_tz":-120,"elapsed":580,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"86494eec-8ec0-42d3-efde-099a0b26fe32"},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"aOsgaauXJGEO","executionInfo":{"status":"ok","timestamp":1703717418720,"user_tz":-120,"elapsed":4,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":14,"outputs":[]}]}