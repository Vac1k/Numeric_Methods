{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import math\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"oBtkma812O_E","executionInfo":{"status":"ok","timestamp":1703715891027,"user_tz":-120,"elapsed":1534,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Доп функції:"],"metadata":{"id":"s17eYbMyALGV"}},{"cell_type":"code","source":["def der(f, x, delta = 1e-6):\n","  return (f(x+delta) - f(x-delta))/(2*delta)\n","\n","def dern(f, x, n, delta = 1e-6):\n","  if n == 1:\n","    return der(f, x, delta)\n","  return (dern(f, x + delta, n-1, delta) - dern(f, x - delta, n-1, delta))/(2*delta)"],"metadata":{"id":"1QDUXTOUV_GG","executionInfo":{"status":"ok","timestamp":1703715891027,"user_tz":-120,"elapsed":2,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["superscript_numbers = '⁰¹²³⁴⁵⁶⁷⁸⁹'\n","subscript_numbers = '₀₁₂₃₄₅₆₇₈₉'\n","superscript_t = 'ᵀ'\n","superscript_parenthesis = '⁽⁾'\n","\n","def superscript_number(number):\n","  return ''.join([superscript_numbers[int(i)] for i in str(number)])\n","\n","def subscript_number(number):\n","  return ''.join([subscript_numbers[int(i)] for i in str(number)])\n","\n","def superscript_parenthesed_number(number):\n","  return superscript_parenthesis[0] + superscript_number(number) + superscript_parenthesis[1]"],"metadata":{"id":"S1rQP0bs0X_E","executionInfo":{"status":"ok","timestamp":1703715891027,"user_tz":-120,"elapsed":2,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def my_to_str(num):\n","  if isinstance(num, list) or isinstance(num, np.ndarray):\n","    for j, i in enumerate(num):\n","      num[j] = my_to_str(i)\n","    return num\n","  if isinstance(num, float):\n","    if int(num) == num:\n","      return str(int(num))\n","    num = round(num, 4)\n","    return str(num)\n","  return str(num)\n","\n","def true_print(data):\n","  display(pd.DataFrame(data).applymap(my_to_str))\n","\n","def hypatia_paste(some_data):\n","  for i in some_data:\n","    print('{', end='')\n","    print('}&{'.join(list(map(my_to_str, i))).replace('.',','), end='')\n","    print('}', end='')\n","    print('\\\\\\\\')\n","\n","def display_matrix(matrix):\n","  true_print(matrix)\n","  hypatia_paste(matrix)\n","\n","def display_vector(vector):\n","  # display(pd.DataFrame(vector).T)\n","  print(f\"({' '.join(list(map(my_to_str, vector))).replace('.',',')})\")\n","\n","def display_with_hypatia(data):\n","  if len(data.shape) == 1:\n","    display_vector(data)\n","  elif len(data.shape) == 2:\n","    display_matrix(data)\n","  else:\n","    raise Exception('Not implemented')\n","\n","def show_dictionary_as_dataframe(diction, transp = False):\n","  dataframe = pd.DataFrame(diction).applymap(my_to_str)\n","  if transp:\n","    dataframe = dataframe.T\n","  display(dataframe)\n"],"metadata":{"id":"ACIHMEtIrDMP","executionInfo":{"status":"ok","timestamp":1703715891425,"user_tz":-120,"elapsed":400,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def preproccess(string):\n","  if isinstance(string, str):\n","    string = string.replace(',','.')\n","    arrays = string.split('\\n')\n","    arrays = [i.split() for i in arrays if len(i)>0]\n","    arrays = [np.array(list(map(float, i))) for i in arrays]\n","    return np.array(arrays)\n","\n","  return string"],"metadata":{"id":"V25csnUIsFUZ","executionInfo":{"status":"ok","timestamp":1703715891425,"user_tz":-120,"elapsed":11,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def create_case(array):\n","  begin_case_str = '\\\\begin{cases}\\n'\n","  end_case_str = '\\end{cases}'\n","\n","  answer_str = begin_case_str\n","  max_number = len(array)\n","  for i, j in enumerate(array):\n","    t_str = ''\n","    if i == 0:\n","      t_str += f't<{i+1}'\n","    elif i == max_number - 1:\n","      t_str += f't≥{i}'\n","    else:\n","      t_str += f'{i}≤t<{i+1}'\n","    t_str = '{' + t_str + '}'\n","    num_str = '{' + my_to_str(j) + ',}'\n","    answer_str += f'{num_str}&{t_str}\\\\\\\\\\n'\n","\n","  answer_str += end_case_str\n","  return answer_str\n","\n","def create_case_with_num(num, array):\n","  num = '{' + my_to_str(num) + '}'\n","  answer_str = f'p_{num}\\\\left(t\\\\right)='\n","  return answer_str + create_case(array)"],"metadata":{"id":"hXSSTXLf__nf","executionInfo":{"status":"ok","timestamp":1703715891425,"user_tz":-120,"elapsed":10,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"AFQBXseB2HE0","executionInfo":{"status":"ok","timestamp":1703715891425,"user_tz":-120,"elapsed":10,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"outputs":[],"source":["f = lambda x: 1 / (x + 2)\n","e = 10**(-3)\n","n = 40\n","inter = [0, 4]"]},{"cell_type":"code","source":["def Integrate_s(f, n, inter):\n","  m = int(n/2)\n","  h = round((inter[1]-inter[0]) / n, 4)\n","\n","  S1 = 0\n","  for i in range(1, 2*m, 2):\n","    S1 += f(inter[0] + h * i)\n","\n","  S2 = 0\n","  for i in range(2, 2*m, 2):\n","    S2 += f(inter[0] + h * i)\n","\n","  Integ = (inter[1]-inter[0])/(6*m)*(f(inter[0]) + 4 * S1 + 2 * S2 + f(inter[1]))\n","\n","  return Integ"],"metadata":{"id":"PMz2aB6p2OeH","executionInfo":{"status":"ok","timestamp":1703715891426,"user_tz":-120,"elapsed":10,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["n_c = n\n","\n","num = 2\n","I_0 = Integrate_s(f, n_c, inter)\n","print(f'I_h = {round(I_0,4)}')\n","stop = False\n","while True:\n","  I_1 = Integrate_s(f, n_c * 2, inter)\n","  print(f'I_h/{num} = {round(I_1,4)}')\n","  num*=2\n","  if abs(I_0 - I_1) <= e:\n","    break\n","  I_0 = I_1\n","  n_c *= 2\n","print(f'0<{e}')\n","print(f'n = {n_c}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"buQkNg2_2ThN","executionInfo":{"status":"ok","timestamp":1703715891426,"user_tz":-120,"elapsed":10,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"eca83efb-6fca-4007-bf83-3b3c7dca656b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["I_h = 1.0986\n","I_h/2 = 1.0986\n","0<0.001\n","n = 40\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KVyYaZ2R2i1m","executionInfo":{"status":"ok","timestamp":1703715891426,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Ойлера"],"metadata":{"id":"lveG9831MF4V"}},{"cell_type":"code","source":["# x_0 = 0\n","y_0 = 0.5\n","y_d = lambda x, y: -0.4/y**2 - 0.4*x / (0.8 + x)\n","borders = [1, 3]\n","x_0 = borders[0]\n","h = 0.2\n","\n","n = int((borders[1] - borders[0]) / h)\n","dic = {'xᵢ':[], 'Euler_yᵢ':[], 'RK_yᵢ':[]}\n","\n","yi = y_0\n","yiRK = y_0\n","\n","dic['xᵢ'].append(x_0)\n","dic['Euler_yᵢ'].append(yi)\n","dic['RK_yᵢ'].append(yiRK)\n","\n","for i in range(1, n + 1):\n","  xi = x_0 + (i-1) * h\n","  yi = yi + h * y_d(xi, yi)\n","\n","  K1 = h * y_d(xi, yiRK)\n","  K2 = h * y_d(xi + h / 2, yiRK + K1 / 2)\n","  K3 = h * y_d(xi + h / 2, yiRK + K2 / 2)\n","  K4 = h * y_d(xi + h / 2, yiRK + K3)\n","\n","  yiRK = yiRK + 1 / 6 * (K1 + 2 * K2 + 2 * K3 + K4)\n","\n","  dic['xᵢ'].append(xi+h)\n","  dic['Euler_yᵢ'].append(yi)\n","  dic['RK_yᵢ'].append(yiRK)"],"metadata":{"id":"KsIJhfZc3_GY","executionInfo":{"status":"ok","timestamp":1703715891426,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["show_dictionary_as_dataframe(dic, True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"k8fDVBrGMAcl","executionInfo":{"status":"ok","timestamp":1703715891426,"user_tz":-120,"elapsed":5,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"af9f7a62-e00d-4299-bd4a-bd21c1d4fbdc"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["           0        1        2        3        4        5        6        7   \\\n","xᵢ          1      1.2      1.4      1.6      1.8        2      2.2      2.4   \n","Euler_yᵢ  0.5   0.1356  -4.2661  -4.3214   -4.379  -4.4386  -4.4998  -4.5624   \n","RK_yᵢ     0.5  -3.9547   -4.009  -4.0659  -4.1249  -4.1856  -4.2479  -4.3115   \n","\n","               8        9        10  \n","xᵢ            2.6      2.8        3  \n","Euler_yᵢ  -4.6263  -4.6912   -4.757  \n","RK_yᵢ     -4.3763   -4.442  -4.5086  "],"text/html":["\n","  <div id=\"df-673cc559-2ac2-4ae2-95da-fdbb40d54637\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>xᵢ</th>\n","      <td>1</td>\n","      <td>1.2</td>\n","      <td>1.4</td>\n","      <td>1.6</td>\n","      <td>1.8</td>\n","      <td>2</td>\n","      <td>2.2</td>\n","      <td>2.4</td>\n","      <td>2.6</td>\n","      <td>2.8</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>Euler_yᵢ</th>\n","      <td>0.5</td>\n","      <td>0.1356</td>\n","      <td>-4.2661</td>\n","      <td>-4.3214</td>\n","      <td>-4.379</td>\n","      <td>-4.4386</td>\n","      <td>-4.4998</td>\n","      <td>-4.5624</td>\n","      <td>-4.6263</td>\n","      <td>-4.6912</td>\n","      <td>-4.757</td>\n","    </tr>\n","    <tr>\n","      <th>RK_yᵢ</th>\n","      <td>0.5</td>\n","      <td>-3.9547</td>\n","      <td>-4.009</td>\n","      <td>-4.0659</td>\n","      <td>-4.1249</td>\n","      <td>-4.1856</td>\n","      <td>-4.2479</td>\n","      <td>-4.3115</td>\n","      <td>-4.3763</td>\n","      <td>-4.442</td>\n","      <td>-4.5086</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-673cc559-2ac2-4ae2-95da-fdbb40d54637')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-673cc559-2ac2-4ae2-95da-fdbb40d54637 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-673cc559-2ac2-4ae2-95da-fdbb40d54637');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e34c23b1-9394-47b1-bc06-228e9dcb1b25\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e34c23b1-9394-47b1-bc06-228e9dcb1b25')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e34c23b1-9394-47b1-bc06-228e9dcb1b25 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{}}]},{"cell_type":"code","source":["plt.plot(dic['xᵢ'], dic['Euler_yᵢ'], color='pink', label='Euler')\n","plt.plot(dic['xᵢ'], dic['RK_yᵢ'], color='c', label='Runge–Kutta')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"gbm8oJYzQuNQ","executionInfo":{"status":"ok","timestamp":1703716249647,"user_tz":-120,"elapsed":1080,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}},"outputId":"bb1e96cc-1b10-4ae3-a373-90c5baeaada0"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"SlwRc6yU7dbF","executionInfo":{"status":"ok","timestamp":1703715892436,"user_tz":-120,"elapsed":6,"user":{"displayName":"Maksym Shkarupylo","userId":"07461948744333407479"}}},"execution_count":13,"outputs":[]}]}